#!/bin/sh
# Copyright 2014  John Barrett <john@jbrt.org>
#
# Based on rpm2targz:
# Copyright 1997, 1998  Patrick Volkerding, Moorhead, MN USA
# Copyright 2002, 2004  Slackware Linux, Inc., Concord, CA USA
# Copyright 2006, 2009  Patrick Volkerding, Sebeka, MN USA
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

CWD=$(pwd)

# Breaking the help out into it's own deal
usage() {
  echo "$0:  Converts DEB format to standard GNU tar + GNU zip format."
  echo "            (view converted packages with \"less\", install and remove"
  echo "            with \"installpkg\", \"removepkg\", \"pkgtool\", or manually"
  echo "            with \"tar\")"
  echo
  if [ "$(basename $0)" = "deb2tgz" -o "$(basename $0)" = "deb2txz" ]; then
    echo "Usage:      $0 [OPTION] <file.deb>"
    echo "            (Outputs \"file.tgz\")"
    echo
    echo "  -s    extract the install scripts to /usr/doc/\$PRGNAM-\$VERSION/"
    echo "          for review."
    echo "  -S    extracts the install scripts to be executed on package installation"
    echo "          (only pre-install and post-install scripts used)"
    echo "          USE WITH CAUTION! "
    echo "  -n    name the output package using the deb's metadata"
    echo "  -r    extract what the deb's \"requires\" (dependencies)"
    echo "          as documention to /usr/doc/\$PRGNAM-\$VERSION/"
    echo "  -d    attempt a wellformed slack-desc from the deb meta data"
    echo
  else
    echo "Usage:      $0 <file.deb>"
    echo "            (Outputs \"file.tar.gz\")"
  fi
  exit 1;
}

# Create a new temporary directory with a secure filename:
make_temp_dir() {
  if [ -x "$(which mcookie)" ]; then
    tempd=/tmp/tmp.$(mcookie)
    mkdir -p -m 0755 $tempd
  elif [ -x "$(which openssl)" ]; then
    tempd=/tmp/tmp.$(dd if=/dev/urandom bs=1k count=1 2> /dev/null | openssl dgst -md5)
    mkdir -p -m 0755 $tempd
  elif [ -x "$(which md5)" ]; then
    tempd=/tmp/tmp.$(dd if=/dev/urandom bs=1k count=1 2> /dev/null | md5)
    mkdir -p -m 0755 $tempd
  elif [ -x "$(which mktemp)" ]; then
    tempd=$(mktemp -d)
    chmod 755 $tempd
  ## Uncomment for insecure use, but don't blame me:
  #else
  #  tempd=/tmp/tmp.$$
  #  mkdir -p -m 0755 $tempd
  fi
  if [ -d $tempd ]; then # success, return the name of the directory:
    echo $tempd
  else
    echo "ERROR:  Could not find mcookie, openssl, or md5."
    echo "        Exiting since a secure temporary directory could not be made."
    exit 1
  fi
}

# Get the meta data off of the deb
get_meta_data() {
  control=$TMPDIR/control
  if [ ! -f $control ] ; then
    echo "ERROR: control file not present, unable to retrieve package metadata"
    exit 1
  fi

  TMPIFS=$IFS
  IFS=$'\012'
  LONGDESC=""

  for line in $(cat $control) ; do
    if    [[ $line =~ ^Package:\ (.*) ]] ; then
      PRGNAM=${BASH_REMATCH[1]}
    elif  [[ $line =~ ^Architecture:\ (.*) ]] ; then
      ARCH=${BASH_REMATCH[1]}
      case $ARCH in
        i?86)  ARCH=i486 ;;
        arm*)  ARCH=arm ;;
        amd64) ARCH=x86_64 ;;
      esac
    elif  [[ $line =~ ^Version:\ (.*) ]] ; then
      VERSION=${BASH_REMATCH[1]}
      if [[ $VERSION =~ (.*)-(.*) ]] ; then
        VERSION=${BASH_REMATCH[1]}
        BUILD=${BASH_REMATCH[2]}
      else
        BUILD=1
      fi
    elif  [[ $line =~ ^Depends:\ (.*) ]] ; then
      REQUIRES=${BASH_REMATCH[1]}
    elif  [[ $line =~ ^Homepage:\ (.*) ]] ; then
      HOMEPAGE=${BASH_REMATCH[1]}
    elif  [[ $line =~ ^Description:\ (.*) ]] ; then
      SHORTDESC="${BASH_REMATCH[1]}"
    elif  [[ $line =~ ^\ +(.*) ]] ; then
      if [ -z $LONGDESC ] ; then
        LONGDESC="${BASH_REMATCH[1]}"
      else
        LONGDESC="$LONGDESC\n${BASH_REMATCH[1]}"
      fi
    fi
  done < $control

  IFS=$TMPIFS
}

if [ "$1" = "" ]; then
  usage
fi

ARGS=$(getopt "hsSndr" $* )
set -- ${ARGS}
for i; do
  case "$1" in
    -s)
      DOC_SCRIPTS="true"
      shift
      ;;
    -S)
      INSTALL_SCRIPTS="true"
      shift
      ;;
    -r)
      DOC_REQUIRES="true"
      shift
      ;;
    -d)
      DESC="true"
      shift
      ;;
    -n)
      META_NAME="true"
      shift
      ;;
    --)
      shift
      break
      ;;
  esac
done


for i in $* ; do
  fn=$(realpath $i)
  # Create a temporary directory:
  TMPDIR=$(make_temp_dir)

  # Extract the deb:
  (
    cd $TMPDIR
    if which ar 1> /dev/null 2> /dev/null ; then
      ar x $fn 2> /dev/null
      if [ ! $? = 0 ]; then
        echo "ERROR:  ar failed.  (maybe $fn is not a DEB?)"
        rm -rf $TMPDIR
        continue
      fi
    else
      echo "ERROR: ar not installed, bailing"
      exit 1
    fi
    exit
  )
  PKGDIR=$TMPDIR/pkg
  mkdir -p $PKGDIR
  tar xf $TMPDIR/data.tar.?z -C $PKGDIR
  find $PKGDIR -type d -perm 700 -exec chmod 755 {} \;
  tar xf $TMPDIR/control.tar.?z -C $TMPDIR

  # Save the scripts in the deb as documentation
  if [ "$DOC_SCRIPTS" = "true" ]; then
    get_meta_data
    mkdir -p $PKGDIR/usr/doc/$PRGNAM-$VERSION/
    for state in preinst postinst prerm postrm ; do
      if [ -f $TMPDIR/$state ] ; then
        cp $TMPDIR/$state $PKGDIR/usr/doc/$PRGNAM-$VERSION/$state.script
      fi
    done
  fi

  # Save the scripts in the deb to be installed
  if [ "$INSTALL_SCRIPTS" = "true" ]; then
    mkdir -p $PKGDIR/install
    echo '#!/bin/sh' > $PKGDIR/install/doinst.sh
    for state in preinst postinst ; do
      if [ -f $TMPDIR/$state ] ; then
        cat $TMPDIR/$state >> $PKGDIR/install/doinst.sh
        echo "" >> $PKGDIR/install/doinst.sh
      fi
    done
  fi

  # Save the deb's requires (dependencies) as documentation
  if [ "$DOC_REQUIRES" = "true" ]; then
    get_meta_data
    mkdir -p $PKGDIR/usr/doc/$PRGNAM-$VERSION/
    echo $REQUIRES > $PKGDIR/usr/doc/$PRGNAM-$VERSION/README-$PRGNAM-deb-dependencies.txt
  fi

  # Save the deb's summary and description as the slack-desc
  if [ "$DESC" = "true" ]; then
    get_meta_data
    mkdir -p $PKGDIR/install
    SHORTDESC="$(echo -n "$PRGNAM ($SHORTDESC" | cut -c1-69 ))"
    echo -ne "$PRGNAM: $SHORTDESC\n$PRGNAM:\n" > $PKGDIR/install/slack-desc
    echo -ne "$LONGDESC" | sed -l 70 -r "s/^/$PRGNAM: /" >> $PKGDIR/install/slack-desc
    if [ -n "$HOMEPAGE" ] ; then
      echo -ne "\n$PRGNAM:\n$PRGNAM: $HOMEPAGE" >> $PKGDIR/install/slack-desc
    fi
  fi

  # If this program was called as "deb2targz", then repack as a plain
  # tar+gz archive.  If it was called as "deb2tgz/txz", use Slackware's
  # makepkg to produce the .tgz/txz:
  if [ "$(basename $0)" = "deb2tgz" ]; then
    TGZ='1'
    EXT=tgz
  elif [ "$(basename $0)" = "deb2txz" ]; then
    TXZ='1'
    EXT=txz
  fi

  if [ "$TGZ" == "1" -o "$TXZ" == "1" ]; then
    (
      if [ "$META_NAME" = "true" ]; then
        get_meta_data
        cd $PKGDIR
        makepkg -l y -c n $CWD/$PRGNAM-$VERSION-$ARCH-${BUILD}.$EXT
      else
        cd $PKGDIR
        makepkg -l y -c n $CWD/$(basename $i .deb).$EXT
      fi
    )
  else
    ( cd $PKGDIR ; tar cf - . ) > $(basename $i .deb).tar
    gzip -9 $(basename $i .deb).tar
  fi

  # Remove temporary directory:
  rm -rf $TMPDIR

done

